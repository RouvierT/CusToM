function [MuscleForcesComputationResults] = ForcesComputationOptiNum(filename, BiomechanicalModel, AnalysisParameters)
% Computation of the muscle forces estimation step by using an optimization method
%
%	Based on :
%	- Crowninshield, R. D., 1978.
%	Use of optimization techniques to predict muscle forces. Journal of Biomechanical Engineering, 100(2), 88-92.
%
%   INPUT
%   - filename: name of the file to process (character string)
%   - BiomechanicalModel: musculoskeletal model
%   - AnalysisParameters: parameters of the musculoskeletal analysis,
%   automatically generated by the graphic interface 'Analysis'
%   OUTPUT
%   - MuscleForcesComputationResults: results of the muscle forces
%   estimation step (see the Documentation for the structure)
%________________________________________________________
%
% Licence
% Toolbox distributed under GPL 3.0 Licence
%________________________________________________________
%
% Authors : Antoine Muller, Charles Pontonnier, Pierre Puchaud and
% Georges Dumont
%________________________________________________________
disp(['Forces Computation (' filename ') ...'])

%% Loading variables

load([filename '/ExperimentalData.mat']); %#ok<LOAD>
load([filename '/ExternalForcesComputationResults.mat']); %#ok<LOAD>
if AnalysisParameters.ID.InputData == 0
    ExtForces = ExternalForcesComputationResults.NoExternalForce;
elseif AnalysisParameters.ID.InputData == 1
    ExtForces = ExternalForcesComputationResults.ExternalForcesExperiments;
elseif AnalysisParameters.ID.InputData == 2
    ExtForces = ExternalForcesComputationResults.ExternalForcesPrediction;
end



time = ExperimentalData.Time;
freq = 1/time(2);

Muscles = BiomechanicalModel.Muscles;
load([filename '/InverseKinematicsResults']) %#ok<LOAD>
load([filename '/InverseDynamicsResults']) %#ok<LOAD>



q=InverseKinematicsResults.JointCoordinates;
torques =InverseDynamicsResults.JointTorques;

Nb_q=size(q,1);

if ~isempty(intersect({BiomechanicalModel.OsteoArticularModel.name},'root0'))
    BiomechanicalModel.OsteoArticularModel=BiomechanicalModel.OsteoArticularModel(1:end-6);
end

Nb_frames=size(q,2);

%existing muscles
idm = logical([Muscles.exist]);
Nb_muscles=numel(Muscles(idm));

if ~isempty(intersect({BiomechanicalModel.OsteoArticularModel.name},'root0'))
    BiomechanicalModel.OsteoArticularModel=BiomechanicalModel.OsteoArticularModel(1:end-6);
end

%% computation of muscle moment arms from joint posture
L0=ones(Nb_muscles,1);
Ls=ones(Nb_muscles,1);
for i=1:Nb_muscles
    Muscle_i = BiomechanicalModel.Muscles(i);
    if ~isempty(Muscle_i.ls) && ~isempty(Muscle_i.l0)
        L0(i) = Muscle_i.l0;
        Ls(i) = Muscle_i.ls;
    end
end
Lmt=zeros(Nb_muscles,Nb_frames);
R=zeros(Nb_q,Nb_muscles,Nb_frames);
for i=1:Nb_frames % for each frames
    Lmt(:,i)   =   MuscleLengthComputationNum(BiomechanicalModel,q(:,i)); %dependant of every q (q_complete)
    R(:,:,i)    =   MomentArmsComputationNum(BiomechanicalModel,q(:,i),0.0001); %depend on reduced set of q (q_red)
end

% R=bras_levier_litt(BiomechanicalModel,R);

Lm = Lmt(idm,:)./(Ls./L0+1);
% Muscle length ratio to optimal length
Lm_norm = Lm./L0;
% Muscle velocity
Vm = gradient(Lm_norm)*freq;

[idxj,~]=find(sum(R(:,:,1),2)~=0);
%idxj=23:29;

% nvR=flechis_extens(2);
% [idxj,~]=find(sum(nvR,2)~=0);

%% Computation of muscle forces (optimization)
% Optimisation parameters

for i=1:size(idm,2)
    Muscles(i).f0 = Muscles(i).f0;
end
Fmax = [Muscles(idm).f0]';
Aopt = zeros(Nb_muscles,Nb_frames);
% Muscle Forces Matrices computation
if isfield(AnalysisParameters.Muscles,'MuscleModel')
    [Fa,Fp]=AnalysisParameters.Muscles.MuscleModel(Lm,Vm,Fmax);
else
    [Fa,Fp]=SimpleMuscleModel(Lm,Vm,Fmax);
end
% Solver parameters
options1 = optimoptions(@fmincon,'Algorithm','sqp','Display','final','GradObj','off','GradConstr','off','TolFun',1e-4,'TolCon',1e-6,'MaxIterations',100000,'MaxFunEvals',100000);
options2 = optimoptions(@fmincon,'Algorithm','sqp','Display','final','GradObj','off','GradConstr','off','TolFun',1e-4,'TolCon',1e-6,'MaxIterations',100000,'MaxFunEvals',2000000);

pourcentage_raideur  = AnalysisParameters.Muscles.Stiffness.alpha;



h = waitbar(0,['Forces Computation (' filename ')']);
[solid_path1,solid_path2,num_solid,num_markers]=Data_ClosedLoop(BiomechanicalModel.OsteoArticularModel);

dependancies=KinematicDependancy(BiomechanicalModel.OsteoArticularModel);
% Closed-loop constraints

KT=ConstraintsJacobian(BiomechanicalModel,q(:,1),solid_path1,solid_path2,num_solid,num_markers,ones(size(q,1),1),0.0001,dependancies)';

effector = AnalysisParameters.Muscles.Stiffness.effector;
i_eff = 1;
MuscleConcerned=[];
if ~isempty(effector)
    for solid_eff=effector(:,1)' %among the effector solids
        SolidConcerned_eff = find_solid_path(BiomechanicalModel.OsteoArticularModel,solid_eff,1);
        MuscleConcerned_eff = []; %construction of MuscleConcerned
        for i=1:Nb_muscles
            if ~isempty(intersect(BiomechanicalModel.Muscles(i).num_solid(1),SolidConcerned_eff)) && ~isempty(intersect(BiomechanicalModel.Muscles(i).num_solid(end),SolidConcerned_eff))
                %verifying that the first and last solids connected to the muscle belong to SolidConcerned_eff
                MuscleConcerned_eff = [MuscleConcerned_eff i];
            end
        end
        SolidConcerned(i_eff).list = SolidConcerned_eff;
        MuscleConcerned(i_eff).list = MuscleConcerned_eff;
        i_eff = i_eff + 1;
    end
end
lambda = zeros(size(KT,2),1);





%Ktmax
options = optimoptions('fmincon','Algorithm','interior-point','Display','final','MaxIterations',100000,'MaxFunEvals',100000);
Amin = [zeros(Nb_muscles,1); -inf*ones(size(lambda))];
A0 = 0.5*ones(Nb_muscles,1);
Amax = [ones(Nb_muscles,1);inf*ones(size(lambda))];
X0 = [A0 ; lambda];
i_eff=1;
i=1;
Ktmax=[];
Fext=[];
dRdq={};
J={};
dJdq={};
% Moment arms and Active forces
Aeq = [R(idxj,:,1).*Fa(:,1)' , KT(idxj,:)] ;
% Joint Torques and Passive force
beq=torques(idxj,1) - R(idxj,:,1)*Fp(:,1);
if ~isempty(effector)
    for solid_eff=effector(:,1)'
        Fext = ExtForces(1).fext(solid_eff);
        Fext = Fext.fext(1:3,1);
        dp=0.0001;
        dRdqtemp = DerivateMomentArmsComputationNum(BiomechanicalModel,q(:,i),dp,SolidConcerned(i_eff).list);
        dRdq{i_eff}=dRdqtemp(idxj,:,idxj);
        Jtemp = diffdXdq(effector(i_eff,:), SolidConcerned(i_eff).list, BiomechanicalModel, q(:,i), dp);
        J{i_eff} = Jtemp(:,idxj);
        dJdqtemp= diff2dXdq(effector(i_eff,:), SolidConcerned(i_eff).list, BiomechanicalModel, q(:,i), dp);
        dJdq{i_eff} = dJdqtemp(idxj,:,idxj);
        if ~isempty(find(pourcentage_raideur,1))
            [Active_max,fval] = fmincon(@(A) funKtmax(A,BiomechanicalModel,MuscleConcerned(i_eff).list,Fext,Fa(:,i),Fp(:,i),R(idxj,:,i),dRdq{i_eff},J{i_eff},dJdq{i_eff}),X0,Aeq,beq,[],[],Amin,Amax,[],options);
            Ktmax = [Ktmax -fval];
        end
        i_eff=i_eff+1;
    end
end
% Optimization
[X(:,1)]=AnalysisParameters.Muscles.Costfunction(X0,Aeq,beq, Amin, Amax, options1,AnalysisParameters.Muscles.CostfunctionOptions,Fmax,BiomechanicalModel,MuscleConcerned,Fext, Fa(:,i),Fp(:,i),R(idxj,:,i),dRdq,J,dJdq, AnalysisParameters.Muscles.Stiffness.alpha, Ktmax);
% Muscular activity
Aopt(:,1) = X(1:Nb_muscles,1);
X0 = X(:,1);
Fopt(:,1) = Fa(:,1).*Aopt(:,1)+Fp(:,1);
waitbar(1/Nb_frames)



%initialisation
Kt=cell(numel(effector(:,1)),Nb_frames);
Kj=cell(numel(effector(:,1)),Nb_frames);
Km=cell(numel(effector(:,1)),Nb_frames);
FMT = Fopt(:,i);
i_eff = 1;
if ~isempty(effector)
    for solid_eff=effector(:,1)'
        Fext = ExtForces(1).fext(solid_eff);
        Fext = Fext.fext(1:3,1); %external forces applied to the solid_eff at the first frame
        Kt(i_eff,i) = {TaskStiffness(BiomechanicalModel,MuscleConcerned(i_eff).list,Fext, FMT,R(idxj,:,i),dRdq{i_eff},J{i_eff},dJdq{i_eff})};
        Kj(i_eff,i) ={JointStiffness(BiomechanicalModel,MuscleConcerned(i_eff).list, FMT,R(idxj,:,i),dRdq{i_eff})};
        km = zeros(length(FMT),1);
        km(MuscleConcerned(i_eff).list) = 23.4*FMT(MuscleConcerned(i_eff).list)./[BiomechanicalModel.Muscles(MuscleConcerned(i_eff).list).l0]';
        Km(i_eff,i)  = {diag(km)};
        i_eff = i_eff+1;
    end
end
%     MuscleForcesComputationResults.TaskStiffness(1) = {Kt(:,1)};

for i=2:Nb_frames % for following frames
    
    KT=ConstraintsJacobian(BiomechanicalModel,q(:,i),solid_path1,solid_path2,num_solid,num_markers,ones(size(q,1),1),0.0001,dependancies)';
    % Moment arms and Active forces
    Aeq = [R(idxj,:,1).*Fa(:,1)' , KT(idxj,:)] ;
    % Joint Torques and Passive force
    beq=torques(idxj,1) - R(idxj,:,1)*Fp(:,1);
    i_eff=1;
    Ktmax=[];
    dRdq={};
    J={};
    dJdq={};
    if ~isempty(effector)
        for solid_eff=effector(:,1)'
            Fext = ExtForces(i).fext(solid_eff);
            Fext = Fext.fext(1:3,1);
            dp=0.0001;
            dRdqtemp = DerivateMomentArmsComputationNum(BiomechanicalModel,q(:,i),dp,SolidConcerned(i_eff).list);
            dRdq{i_eff}=dRdqtemp(idxj,:,idxj);
            Jtemp = diffdXdq(effector(i_eff,:), SolidConcerned(i_eff).list, BiomechanicalModel, q(:,i), dp);
            J{i_eff} = Jtemp(:,idxj);
            dJdqtemp= diff2dXdq(effector(i_eff,:), SolidConcerned(i_eff).list, BiomechanicalModel, q(:,i), dp);
            dJdq{i_eff} = dJdqtemp(idxj,:,idxj);
            if ~isempty(find(pourcentage_raideur,1))
                [Active_max,fval] = fmincon(@(A) funKtmax(A,BiomechanicalModel,MuscleConcerned(i_eff).list,Fext,Fa(:,i),Fp(:,i),R(idxj,:,i),dRdq{i_eff},J{i_eff},dJdq{i_eff}),X0,Aeq,beq,[],[],Amin,Amax,[],options);
                Ktmax = [Ktmax -fval];
            end
            i_eff=i_eff+1;
        end
    end
    % Optimization
    [X(:,i)]=AnalysisParameters.Muscles.Costfunction(X0,Aeq,beq, Amin, Amax, options2,AnalysisParameters.Muscles.CostfunctionOptions,Fmax,BiomechanicalModel,MuscleConcerned,Fext, Fa(:,i),Fp(:,i),R(idxj,:,i),dRdq,J,dJdq, AnalysisParameters.Muscles.Stiffness.alpha, Ktmax);
    
    
    % Muscular activity
    
    Aopt(:,i) = X(1:Nb_muscles,i);
    X0 = X(:,i);
    Fopt(:,i) = Fa(:,i).*Aopt(:,i)+Fp(:,i);
    waitbar(i/Nb_frames)
    
    
    
    FMT = Fopt(:,i);
    i_eff = 1;
    if ~isempty(effector)
        
        for solid_eff=effector(:,1)'
            Fext = ExtForces(i).fext(solid_eff);
            Fext = Fext.fext(1:3,1); %external forces applied to the solid_eff at the i-frame
            Kt(i_eff,i) = {TaskStiffness(BiomechanicalModel,MuscleConcerned(i_eff).list,Fext, FMT,R(idxj,:,i),dRdq{i_eff},J{i_eff},dJdq{i_eff})};
            Kj(i_eff,i) ={JointStiffness(BiomechanicalModel,MuscleConcerned(i_eff).list, FMT,R(idxj,:,i),dRdq{i_eff})};
            
            km = zeros(length(FMT),1);
            km(MuscleConcerned(i_eff).list) = 23.4*FMT(MuscleConcerned(i_eff).list)./[BiomechanicalModel.Muscles(MuscleConcerned(i_eff).list).l0]';
            Km(i_eff,i)  = {diag(km)};
            
            i_eff = i_eff+1;
        end
    end
    
    
    
end

MuscleForcesComputationResults.MuscleActivations(idm,:) = Aopt;
MuscleForcesComputationResults.MuscleForces(idm,:) = Fopt;
MuscleForcesComputationResults.MuscleLengths= Lmt;
MuscleForcesComputationResults.MuscleLeverArm = R;
MuscleForcesComputationResults.Lambda = X(Nb_muscles+1:end,:);
if ~isempty(effector)
    MuscleForcesComputationResults.Stiffness.TaskStiffness = Kt;
    MuscleForcesComputationResults.Stiffness.JointStiffness = Kj;
    MuscleForcesComputationResults.Stiffness.MuscleStiffness = Km;
    MuscleForcesComputationResults.Stiffness.MuscleConcerned = MuscleConcerned;
end
close(h)

disp(['... Forces Computation (' filename ') done'])
end